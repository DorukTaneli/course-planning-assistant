@page
@model IndexModel
@{
    ViewData["Title"] = "Home page";
}

@using Highsoft.Web.Mvc.Charts
@using Highsoft.Web.Mvc.Charts.Rendering;
<style>
    input[type=submit] {
        font-family: Georgia;
        font-size: 20px;
        background: #eac9fe;
        border: none;
        border-radius: 5px;
        position: relative;
        left: 50%;
    }

    th {
        text-align: left;
    }

    .timetable {
        border-collapse: collapse;
        font-size: 0.9em;
        margin: 25px 0;
        table-layout: fixed;
        width: 100%;
    }

        .timetable thead tr {
            background-color: #eac9fe;
        }

        .timetable th,
        .timetable td {
            padding: 10px 10px;
        }

        .timetable tbody tr {
            border-bottom: 1px solid #dddddd;
        }

            .timetable tbody tr:nth-of-type(even) {
                background-color: #f3f3f3;
            }

            .timetable tbody tr:last-of-type {
                border-bottom: 2px solid #eac9fe;
            }
</style>

<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.5.1/jquery.min.js"></script>
<script src="https://code.highcharts.com/highcharts.js"></script>
<script src="https://code.highcharts.com/highcharts-more.js"></script>
<script src="https://code.highcharts.com/modules/exporting.js"></script>
<script src="https://code.highcharts.com/modules/accessibility.js"></script>

<div align="right" style="width:950px">
    <form method="post" asp-page-handler="Refresh">
        <input type="submit" value="Refresh">
    </form>
</div>

<figure class="highcharts-figure">
    <div id="container" align="left" style="width:1300px; height: 650px"></div>
</figure>

<div align="center" style="width:800px">
    <form method="post" asp-page-handler="MakeTimetables">
        <input type="submit" value="Show Timetables">
    </form>
</div>


@{
    var flag = ViewData["flag"] as string;
    if (string.Compare(flag, "flag") == 0)
    {
        var count = 0;
        var allTables = ViewData["tables"] as List<List<List<string>>>;
        foreach (List<List<string>> table in allTables)
        {
            count += 1;
            <h2>Timetable @count</h2>
            <table class="timetable">
                <colgroup>
                    <col style="width:150px" />
                    <col style="width:150px" />
                    <col style="width:150px" />
                    <col style="width:150px" />
                    <col style="width:150px" />
                    <col style="width:150px" />
                </colgroup>
                <thead>
                    <tr>
                        <th></th>
                        <th>Monday</th>
                        <th>Tuesday</th>
                        <th>Wednesday</th>
                        <th>Thursday</th>
                        <th>Friday</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (List<string> row in table)
                    {
                        <tr>
                            @foreach (string element in row)
                            {
                                switch (element)
                                {
                                    case "8:30-9:45":
                                        <td>08.30-09.45</td>
                                        break;
                                    case "10:0-11:15":
                                        <td>10.00-11.15</td>
                                        break;
                                    case "11:30-12:45":
                                        <td>11.30-12.45</td>
                                        break;
                                    case "13:0-14:15":
                                        <td>13.00-14.15</td>
                                        break;
                                    case "14:30-15:45":
                                        <td>14.30-15.45</td>
                                        break;
                                    case "16:0-17:15":
                                        <td>16.00-17.15</td>
                                        break;
                                    case "17:30-18:45":
                                        <td>17.30-18.45</td>
                                        break;
                                    default:
                                        <td>@element</td>
                                        break;
                                }
                            }
                        </tr>
                    }
                </tbody>
            </table>
        }
    }
}

<script>
    var selectedCourses = [];

    var canClick = true;

    var chart;

    function reddy(subject, code, collision) {
        //console.log(chart.series.length);

        for (var i = 0; i < chart.series.length; i++) {


            if (chart.series[i].name == subject) {
                //console.log(chart.series[i]);
                for (var j = 0; j < chart.series[i].data.length; j++) {

                    //console.log(chart.series[i].data[j].name);
                    if (chart.series[i].data[j].name == code) {
                        //if (chart.series[i].data[j].color == 'pink') {
                        //    var col = chart.series[i].data[j].options.prereq + ", " + collision;
                        //    chart.series[i].data[j].options.prereq = col;
                        //    chart.series[i].data[j].update({ prereq: col });
                        //}
                        if (chart.series[i].data[j].color != 'white' && 'pink') {
                            chart.series[i].data[j].update({ color: 'pink' });
                            var col = chart.series[i].data[j].options.prereq + ", Conflicts with: " + collision;
                            chart.series[i].data[j].options.prereq = col;
                            chart.series[i].data[j].update({ prereq: col });
                        }
                    }
                }


            }
        }
    };


    var options = {
        chart: {
            type: 'packedbubble',
            height: '650',
            width: '1300',
            marginRight: 200
        },
        legend: {
            align: 'left',
            verticalAlign: 'middle',
            width: 200,
            itemWidth: 100
        },
        title: {
            text: 'Fall 2019'
        },
        tooltip: {
            formatter: function () {
                var str = ""
                if (this.series.name != this.point.name) {
                    str = '<b>' + this.series.name + ' ' + this.point.name + ': </b>' + this.point.value + ' students';

                    if (this.point.prereq != null) {
                        str = str.concat(', Prerequisites:' + this.point.prereq);
                    }
                } else {
                    str = '<b>' + this.series.name + ' </b>';
                }
                return str;
            }
        },
        plotOptions: {
            series: {
                visible: false,
            },
            packedbubble: {
                //allowPointSelect: true,
                //selected: false,
                minSize: '10%',
                maxSize: '150%',
                zMin: 0,
                zMax: 1000,
                layoutAlgorithm: {
                    gravitationalConstant: 0.05,
                    friction: -0.9,
                    splitSeries: true,
                    seriesInteraction: false,
                    dragBetweenSeries: false,
                    parentNodeLimit: true
                },
                dataLabels: {
                    enabled: true,
                    formatter: function () {
                        if (this.series.name == this.point.name) {
                            return '<b>' + (this.point.name) + '</b>';
                        }
                        else {
                            return this.point.name;
                        }
                    },
                    style: {
                        color: 'black',
                        textOutline: 'none',
                        fontWeight: 'normal'

                    }
                },
                point: {
                    //selected: false,
                    events: {
                        click: function (e) {
                            if (canClick) {
                                if (this.series.name != this.name) { // must not be subject labelled bubbles
                                    var course = { name: this.series.name, code: this.name, color: this.color };
                                    var len = selectedCourses.length;
                                    //if its not selected, select it
                                    if (this.color != 'white') {
                                        canClick = false;
                                        selectedCourses[len] = course;
                                        this.update({ color: 'white' });
                                        
                                        var sc = JSON.stringify(selectedCourses);
                                        //console.log(sc);
                                        $.ajax({
                                            type: "POST",
                                            url: "/Index?handler=SelectedCourses",
                                            beforeSend: function (xhr) {
                                                xhr.setRequestHeader("XSRF-TOKEN",
                                                    $('input:hidden[name="__RequestVerificationToken"]').val());
                                            },
                                            data: sc,
                                            contentType: "application/json; charset=utf-8",
                                            dataType: "json",
                                            success: function (response) {
                                                alert(response);
                                            },
                                            failure: function (response) {
                                                alert(response);
                                            }
                                        });

                                        //console.log("\nShowing the selected courses:\n");
                                        //if (selectedCourses.length > 0) {
                                        //    for (var i = 0; i < selectedCourses.length; i++) {
                                        //        console.log(selectedCourses[i].name + selectedCourses[i].code);
                                        //    }
                                        //}

                                        setTimeout(() => {

                                            $.ajax({
                                                type: "GET",
                                                url: "/Index?handler=Dict",
                                                contentType: "application/json",
                                                dataType: "json",
                                                success: function (response) {
                                                    var dict = response;
                                                    for (var course in dict) {
                                                        var subject = course.substring(0, course.length - 3);
                                                        var code = course.substring(course.length - 3, course.length);
                                                        var collided = dict[course][0];
                                                        var len = selectedCourses.length - 1;
                                                        reddy(subject, code, collided);
                                                    }
                                                },
                                                failure: function (response) {
                                                    alert(response);
                                                }
                                            });

                                            canClick = true;
                                        }, 3000);

                                    } /*else { // if its selected, deselect it
                                            var temp = [];
                                            var t = 0;
                                            for (var i = 0; i < len; i++) {
                                                if (selectedCourses[i].name == course.name && selectedCourses[i].code == course.code) {

                                                    this.update({ color: selectedCourses[i].color });
                                                    console.log("Deselecting");
                                                    // skipping this one
                                                } else {
                                                    temp[t] = selectedCourses[i];
                                                    t++;
                                                }
                                            }
                                            selectedCourses = temp;
                                        }*/
                                }
                            }
                        }
                    }
                }
            }
        },
        series: [{}]
    };

    $.ajax({
        type: "GET",
        url: "/Index?handler=Bubble",
        contentType: "application/json",
        dataType: "json",
        success: function (data) {
            console.log(data.length);
            options.series = data;
            chart = new Highcharts.Chart('container', options);
        },
        failure: function (response) {
            alert(response);
        }
    });

</script>
